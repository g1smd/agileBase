##
##  Copyright 2013 GT webMarque Ltd
##
##  This file is part of agileBase.
##
##  agileBase is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##  agileBase is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with agileBase.  If not, see <http://www.gnu.org/licenses/>.
##
<request>
  #if($view.getWhetherExceptionOccurred())
    <exception type="$view.getException().getClass().getSimpleName()">$view.getException().getMessage()</exception>
    <response>exception</response>
  #else
    <response>ok</response>
	## See if we need to include a warning by checking value against report stats
	#set($fieldInputValues = $sessionData.getFieldInputValues())
	#set($fields = $fieldInputValues.keySet())
	## Find the field being edited (the pKey and hidden metadata may also be saved)
	#foreach($singleField in $fields)
	  #if(!$singleField.isPrimaryKey())
	    #if(!$singleField.getHidden())
		  #set($value = $fieldInputValues.get($singleField))
		  #if(!$value.isNull()) ## dates may have a 'null value'
		    #set($field = $singleField)
		  #end
		#end
	  #end
	#end
	#if($field.getFieldCategory() == "NUMBER")
	  ## false = don't update cache
	  #set($reportData = $view.getReportData($sessionData.getReport(), false))
	  #set($fieldStats = $reportData.getFieldStats())
	  #set($fieldFound = false)
	  #foreach($reportField in $fieldStats.keySet())
		#if($reportField.getBaseField().equals($field))
		  #set($fieldFound = true)
		  #set($reportDataFieldStats = $fieldStats.get($reportField))
		  #set($stdDev = $reportDataFieldStats.getStdDev())
		  #set($mean = $reportDataFieldStats.getMean())
		  #if($stdDev != 0)
			#set($mathTool = $viewTools.getMathTool())
			#set($difference = $mathTool.sub($value,$mean)) ## value - mean
			#set($numStdDevsFromMean = $mathTool.div($difference, $stdDev)) ## difference / stdDev
		    #if($mathTool.abs($numStdDevsFromMean) > 20)
			  <warning>Note: $value is an unusual value</warning>
		    #end
		  #end
		  #break ## TODO: check this breaks out of the foreach as we want
		#end
	  #end
	  #if(!$fieldFound)
		## If field not found in current report, fall back to table
		## TODO: refactor this code, substantially the same as above
	    #set($reportData = $view.getReportData($field.getTableContainingField().getDefaultReport(), false))
	    #set($fieldStats = $reportData.getFieldStats())
	    #foreach($reportField in $fieldStats.keySet())
		  #if($reportField.getBaseField().equals($field))
		    #set($reportDataFieldStats = $fieldStats.get($reportField))
		    #set($stdDev = $reportDataFieldStats.getStdDev())
		    #set($mean = $reportDataFieldStats.getMean())
		    #if($stdDev != 0)
			  #set($mathTool = $viewTools.getMathTool())
			  #set($difference = $mathTool.sub($value,$mean)) ## value - mean
			  #set($numStdDevsFromMean = $mathTool.div($difference, $stdDev)) ## difference / stdDev
		      #if($mathTool.abs($numStdDevsFromMean) > 20)
			    <warning>Note: $value is an unusual value</warning>
		      #end
		    #end
		    #break ## TODO: check this breaks out of the foreach as we want
		  #end
	    #end
	  #end ## end if field not found
	#end
  #end
</request>